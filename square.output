Terminals unused in grammar

    OP
    SEMICOLUMN
    PRINT
    OTHER
    COM


Grammar

    0 $accept: prog $end

    1 prog: stmts

    2 stmts: ε
    3      | stmt stmts

    4 stmt: ID EQ NUM
    5     | OPBRA IDFUNC ID ifcomp NUM COL
    6     | OPBRA GT IDFUNC ID COL
    7     | CLBRA NLINE
    8     | NLINE

    9 ifcomp: LT
   10       | GT
   11       | EQ EQ


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NUM <number> (258) 4 5
    OP <string> (259)
    SEMICOLUMN (260)
    PRINT (261)
    OPBRA <string> (262) 5 6
    CLBRA <string> (263) 7
    IDFUNC <string> (264) 5 6
    GT <string> (265) 6 10
    LT <string> (266) 9
    OTHER (267)
    ID <string> (268) 4 5 6
    COM (269)
    COL (270) 5 6
    NLINE (271) 7 8
    EQ <string> (272) 4 11


Nonterminals, with rules where they appear

    $accept (18)
        on left: 0
    prog (19)
        on left: 1
        on right: 0
    stmts (20)
        on left: 2 3
        on right: 1 3
    stmt <number> (21)
        on left: 4 5 6 7 8
        on right: 3
    ifcomp <string> (22)
        on left: 9 10 11
        on right: 5


State 0

    0 $accept: • prog $end

    OPBRA  shift, and go to state 1
    CLBRA  shift, and go to state 2
    ID     shift, and go to state 3
    NLINE  shift, and go to state 4

    $default  reduce using rule 2 (stmts)

    prog   go to state 5
    stmts  go to state 6
    stmt   go to state 7


State 1

    5 stmt: OPBRA • IDFUNC ID ifcomp NUM COL
    6     | OPBRA • GT IDFUNC ID COL

    IDFUNC  shift, and go to state 8
    GT      shift, and go to state 9


State 2

    7 stmt: CLBRA • NLINE

    NLINE  shift, and go to state 10


State 3

    4 stmt: ID • EQ NUM

    EQ  shift, and go to state 11


State 4

    8 stmt: NLINE •

    $default  reduce using rule 8 (stmt)


State 5

    0 $accept: prog • $end

    $end  shift, and go to state 12


State 6

    1 prog: stmts •

    $default  reduce using rule 1 (prog)


State 7

    3 stmts: stmt • stmts

    OPBRA  shift, and go to state 1
    CLBRA  shift, and go to state 2
    ID     shift, and go to state 3
    NLINE  shift, and go to state 4

    $default  reduce using rule 2 (stmts)

    stmts  go to state 13
    stmt   go to state 7


State 8

    5 stmt: OPBRA IDFUNC • ID ifcomp NUM COL

    ID  shift, and go to state 14


State 9

    6 stmt: OPBRA GT • IDFUNC ID COL

    IDFUNC  shift, and go to state 15


State 10

    7 stmt: CLBRA NLINE •

    $default  reduce using rule 7 (stmt)


State 11

    4 stmt: ID EQ • NUM

    NUM  shift, and go to state 16


State 12

    0 $accept: prog $end •

    $default  accept


State 13

    3 stmts: stmt stmts •

    $default  reduce using rule 3 (stmts)


State 14

    5 stmt: OPBRA IDFUNC ID • ifcomp NUM COL

    GT  shift, and go to state 17
    LT  shift, and go to state 18
    EQ  shift, and go to state 19

    ifcomp  go to state 20


State 15

    6 stmt: OPBRA GT IDFUNC • ID COL

    ID  shift, and go to state 21


State 16

    4 stmt: ID EQ NUM •

    $default  reduce using rule 4 (stmt)


State 17

   10 ifcomp: GT •

    $default  reduce using rule 10 (ifcomp)


State 18

    9 ifcomp: LT •

    $default  reduce using rule 9 (ifcomp)


State 19

   11 ifcomp: EQ • EQ

    EQ  shift, and go to state 22


State 20

    5 stmt: OPBRA IDFUNC ID ifcomp • NUM COL

    NUM  shift, and go to state 23


State 21

    6 stmt: OPBRA GT IDFUNC ID • COL

    COL  shift, and go to state 24


State 22

   11 ifcomp: EQ EQ •

    $default  reduce using rule 11 (ifcomp)


State 23

    5 stmt: OPBRA IDFUNC ID ifcomp NUM • COL

    COL  shift, and go to state 25


State 24

    6 stmt: OPBRA GT IDFUNC ID COL •

    $default  reduce using rule 6 (stmt)


State 25

    5 stmt: OPBRA IDFUNC ID ifcomp NUM COL •

    $default  reduce using rule 5 (stmt)

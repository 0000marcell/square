Terminals unused in grammar

    SEMICOLUMN
    OTHER
    COM


Grammar

    0 $accept: prog $end

    1 prog: stmts

    2 stmts: ε
    3      | stmt stmts

    4 stmt: ID EQ NUM
    5     | RETURN fcall
    6     | ID EQ fcall
    7     | OPBRA PRINT param CLBRA
    8     | RETURN binop
    9     | ID
   10     | OPBRA IDFUNC ID ifcomp NUM COL
   11     | OPBRA GT IDFUNC ID COL
   12     | CLBRA NLINE
   13     | NLINE

   14 ifcomp: LT
   15       | GT
   16       | EQ EQ

   17 param: ID
   18      | NUM

   19 fcallparam: ID
   20           | NUM
   21           | binop

   22 fcall: OPBRA IDFUNC fcallparam CLBRA

   23 binop: ID OP NUM


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NUM <number> (258) 4 10 18 20 23
    OP <string> (259) 23
    SEMICOLUMN (260)
    PRINT (261) 7
    RETURN (262) 5 8
    OPBRA <string> (263) 7 10 11 22
    CLBRA <string> (264) 7 12 22
    IDFUNC <string> (265) 10 11 22
    GT <string> (266) 11 15
    LT <string> (267) 14
    OTHER (268)
    ID <string> (269) 4 6 9 10 11 17 19 23
    COM (270)
    COL (271) 10 11
    NLINE (272) 12 13
    EQ <string> (273) 4 6 16


Nonterminals, with rules where they appear

    $accept (19)
        on left: 0
    prog (20)
        on left: 1
        on right: 0
    stmts (21)
        on left: 2 3
        on right: 1 3
    stmt <number> (22)
        on left: 4 5 6 7 8 9 10 11 12 13
        on right: 3
    ifcomp <string> (23)
        on left: 14 15 16
        on right: 10
    param <strnum> (24)
        on left: 17 18
        on right: 7
    fcallparam (25)
        on left: 19 20 21
        on right: 22
    fcall <node> (26)
        on left: 22
        on right: 5 6
    binop <node> (27)
        on left: 23
        on right: 8 21


State 0

    0 $accept: • prog $end

    RETURN  shift, and go to state 1
    OPBRA   shift, and go to state 2
    CLBRA   shift, and go to state 3
    ID      shift, and go to state 4
    NLINE   shift, and go to state 5

    $default  reduce using rule 2 (stmts)

    prog   go to state 6
    stmts  go to state 7
    stmt   go to state 8


State 1

    5 stmt: RETURN • fcall
    8     | RETURN • binop

    OPBRA  shift, and go to state 9
    ID     shift, and go to state 10

    fcall  go to state 11
    binop  go to state 12


State 2

    7 stmt: OPBRA • PRINT param CLBRA
   10     | OPBRA • IDFUNC ID ifcomp NUM COL
   11     | OPBRA • GT IDFUNC ID COL

    PRINT   shift, and go to state 13
    IDFUNC  shift, and go to state 14
    GT      shift, and go to state 15


State 3

   12 stmt: CLBRA • NLINE

    NLINE  shift, and go to state 16


State 4

    4 stmt: ID • EQ NUM
    6     | ID • EQ fcall
    9     | ID •

    EQ  shift, and go to state 17

    $default  reduce using rule 9 (stmt)


State 5

   13 stmt: NLINE •

    $default  reduce using rule 13 (stmt)


State 6

    0 $accept: prog • $end

    $end  shift, and go to state 18


State 7

    1 prog: stmts •

    $default  reduce using rule 1 (prog)


State 8

    3 stmts: stmt • stmts

    RETURN  shift, and go to state 1
    OPBRA   shift, and go to state 2
    CLBRA   shift, and go to state 3
    ID      shift, and go to state 4
    NLINE   shift, and go to state 5

    $default  reduce using rule 2 (stmts)

    stmts  go to state 19
    stmt   go to state 8


State 9

   22 fcall: OPBRA • IDFUNC fcallparam CLBRA

    IDFUNC  shift, and go to state 20


State 10

   23 binop: ID • OP NUM

    OP  shift, and go to state 21


State 11

    5 stmt: RETURN fcall •

    $default  reduce using rule 5 (stmt)


State 12

    8 stmt: RETURN binop •

    $default  reduce using rule 8 (stmt)


State 13

    7 stmt: OPBRA PRINT • param CLBRA

    NUM  shift, and go to state 22
    ID   shift, and go to state 23

    param  go to state 24


State 14

   10 stmt: OPBRA IDFUNC • ID ifcomp NUM COL

    ID  shift, and go to state 25


State 15

   11 stmt: OPBRA GT • IDFUNC ID COL

    IDFUNC  shift, and go to state 26


State 16

   12 stmt: CLBRA NLINE •

    $default  reduce using rule 12 (stmt)


State 17

    4 stmt: ID EQ • NUM
    6     | ID EQ • fcall

    NUM    shift, and go to state 27
    OPBRA  shift, and go to state 9

    fcall  go to state 28


State 18

    0 $accept: prog $end •

    $default  accept


State 19

    3 stmts: stmt stmts •

    $default  reduce using rule 3 (stmts)


State 20

   22 fcall: OPBRA IDFUNC • fcallparam CLBRA

    NUM  shift, and go to state 29
    ID   shift, and go to state 30

    fcallparam  go to state 31
    binop       go to state 32


State 21

   23 binop: ID OP • NUM

    NUM  shift, and go to state 33


State 22

   18 param: NUM •

    $default  reduce using rule 18 (param)


State 23

   17 param: ID •

    $default  reduce using rule 17 (param)


State 24

    7 stmt: OPBRA PRINT param • CLBRA

    CLBRA  shift, and go to state 34


State 25

   10 stmt: OPBRA IDFUNC ID • ifcomp NUM COL

    GT  shift, and go to state 35
    LT  shift, and go to state 36
    EQ  shift, and go to state 37

    ifcomp  go to state 38


State 26

   11 stmt: OPBRA GT IDFUNC • ID COL

    ID  shift, and go to state 39


State 27

    4 stmt: ID EQ NUM •

    $default  reduce using rule 4 (stmt)


State 28

    6 stmt: ID EQ fcall •

    $default  reduce using rule 6 (stmt)


State 29

   20 fcallparam: NUM •

    $default  reduce using rule 20 (fcallparam)


State 30

   19 fcallparam: ID •
   23 binop: ID • OP NUM

    OP  shift, and go to state 21

    $default  reduce using rule 19 (fcallparam)


State 31

   22 fcall: OPBRA IDFUNC fcallparam • CLBRA

    CLBRA  shift, and go to state 40


State 32

   21 fcallparam: binop •

    $default  reduce using rule 21 (fcallparam)


State 33

   23 binop: ID OP NUM •

    $default  reduce using rule 23 (binop)


State 34

    7 stmt: OPBRA PRINT param CLBRA •

    $default  reduce using rule 7 (stmt)


State 35

   15 ifcomp: GT •

    $default  reduce using rule 15 (ifcomp)


State 36

   14 ifcomp: LT •

    $default  reduce using rule 14 (ifcomp)


State 37

   16 ifcomp: EQ • EQ

    EQ  shift, and go to state 41


State 38

   10 stmt: OPBRA IDFUNC ID ifcomp • NUM COL

    NUM  shift, and go to state 42


State 39

   11 stmt: OPBRA GT IDFUNC ID • COL

    COL  shift, and go to state 43


State 40

   22 fcall: OPBRA IDFUNC fcallparam CLBRA •

    $default  reduce using rule 22 (fcall)


State 41

   16 ifcomp: EQ EQ •

    $default  reduce using rule 16 (ifcomp)


State 42

   10 stmt: OPBRA IDFUNC ID ifcomp NUM • COL

    COL  shift, and go to state 44


State 43

   11 stmt: OPBRA GT IDFUNC ID COL •

    $default  reduce using rule 11 (stmt)


State 44

   10 stmt: OPBRA IDFUNC ID ifcomp NUM COL •

    $default  reduce using rule 10 (stmt)

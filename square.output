Terminals unused in grammar

    SEMICOLUMN
    OTHER
    COM


Grammar

    0 $accept: prog $end

    1 prog: stmts

    2 stmts: ε
    3      | stmt stmts

    4 stmt: ID EQ NUM
    5     | RETURN fcall
    6     | RETURN fcall OP fcall
    7     | ID EQ fcall
    8     | OPBRA PRINT param CLBRA
    9     | RETURN binop
   10     | ID
   11     | OPBRA IDFUNC ID ifcomp NUM COL
   12     | OPBRA GT IDFUNC ID COL
   13     | CLBRA NLINE
   14     | NLINE

   15 ifcomp: LT
   16       | GT
   17       | EQ EQ

   18 param: ID
   19      | NUM

   20 fcallparam: ID
   21           | NUM
   22           | binop

   23 fcall: OPBRA IDFUNC fcallparam CLBRA

   24 binop: ID OP NUM


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    NUM <number> (258) 4 11 19 21 24
    OP <string> (259) 6 24
    SEMICOLUMN (260)
    PRINT (261) 8
    RETURN (262) 5 6 9
    OPBRA <string> (263) 8 11 12 23
    CLBRA <string> (264) 8 13 23
    IDFUNC <string> (265) 11 12 23
    GT <string> (266) 12 16
    LT <string> (267) 15
    OTHER (268)
    ID <string> (269) 4 7 10 11 12 18 20 24
    COM (270)
    COL (271) 11 12
    NLINE (272) 13 14
    EQ <string> (273) 4 7 17


Nonterminals, with rules where they appear

    $accept (19)
        on left: 0
    prog (20)
        on left: 1
        on right: 0
    stmts (21)
        on left: 2 3
        on right: 1 3
    stmt <number> (22)
        on left: 4 5 6 7 8 9 10 11 12 13 14
        on right: 3
    ifcomp <string> (23)
        on left: 15 16 17
        on right: 11
    param <node> (24)
        on left: 18 19
        on right: 8
    fcallparam <node> (25)
        on left: 20 21 22
        on right: 23
    fcall <node> (26)
        on left: 23
        on right: 5 6 7
    binop <node> (27)
        on left: 24
        on right: 9 22


State 0

    0 $accept: • prog $end

    RETURN  shift, and go to state 1
    OPBRA   shift, and go to state 2
    CLBRA   shift, and go to state 3
    ID      shift, and go to state 4
    NLINE   shift, and go to state 5

    $default  reduce using rule 2 (stmts)

    prog   go to state 6
    stmts  go to state 7
    stmt   go to state 8


State 1

    5 stmt: RETURN • fcall
    6     | RETURN • fcall OP fcall
    9     | RETURN • binop

    OPBRA  shift, and go to state 9
    ID     shift, and go to state 10

    fcall  go to state 11
    binop  go to state 12


State 2

    8 stmt: OPBRA • PRINT param CLBRA
   11     | OPBRA • IDFUNC ID ifcomp NUM COL
   12     | OPBRA • GT IDFUNC ID COL

    PRINT   shift, and go to state 13
    IDFUNC  shift, and go to state 14
    GT      shift, and go to state 15


State 3

   13 stmt: CLBRA • NLINE

    NLINE  shift, and go to state 16


State 4

    4 stmt: ID • EQ NUM
    7     | ID • EQ fcall
   10     | ID •

    EQ  shift, and go to state 17

    $default  reduce using rule 10 (stmt)


State 5

   14 stmt: NLINE •

    $default  reduce using rule 14 (stmt)


State 6

    0 $accept: prog • $end

    $end  shift, and go to state 18


State 7

    1 prog: stmts •

    $default  reduce using rule 1 (prog)


State 8

    3 stmts: stmt • stmts

    RETURN  shift, and go to state 1
    OPBRA   shift, and go to state 2
    CLBRA   shift, and go to state 3
    ID      shift, and go to state 4
    NLINE   shift, and go to state 5

    $default  reduce using rule 2 (stmts)

    stmts  go to state 19
    stmt   go to state 8


State 9

   23 fcall: OPBRA • IDFUNC fcallparam CLBRA

    IDFUNC  shift, and go to state 20


State 10

   24 binop: ID • OP NUM

    OP  shift, and go to state 21


State 11

    5 stmt: RETURN fcall •
    6     | RETURN fcall • OP fcall

    OP  shift, and go to state 22

    $default  reduce using rule 5 (stmt)


State 12

    9 stmt: RETURN binop •

    $default  reduce using rule 9 (stmt)


State 13

    8 stmt: OPBRA PRINT • param CLBRA

    NUM  shift, and go to state 23
    ID   shift, and go to state 24

    param  go to state 25


State 14

   11 stmt: OPBRA IDFUNC • ID ifcomp NUM COL

    ID  shift, and go to state 26


State 15

   12 stmt: OPBRA GT • IDFUNC ID COL

    IDFUNC  shift, and go to state 27


State 16

   13 stmt: CLBRA NLINE •

    $default  reduce using rule 13 (stmt)


State 17

    4 stmt: ID EQ • NUM
    7     | ID EQ • fcall

    NUM    shift, and go to state 28
    OPBRA  shift, and go to state 9

    fcall  go to state 29


State 18

    0 $accept: prog $end •

    $default  accept


State 19

    3 stmts: stmt stmts •

    $default  reduce using rule 3 (stmts)


State 20

   23 fcall: OPBRA IDFUNC • fcallparam CLBRA

    NUM  shift, and go to state 30
    ID   shift, and go to state 31

    fcallparam  go to state 32
    binop       go to state 33


State 21

   24 binop: ID OP • NUM

    NUM  shift, and go to state 34


State 22

    6 stmt: RETURN fcall OP • fcall

    OPBRA  shift, and go to state 9

    fcall  go to state 35


State 23

   19 param: NUM •

    $default  reduce using rule 19 (param)


State 24

   18 param: ID •

    $default  reduce using rule 18 (param)


State 25

    8 stmt: OPBRA PRINT param • CLBRA

    CLBRA  shift, and go to state 36


State 26

   11 stmt: OPBRA IDFUNC ID • ifcomp NUM COL

    GT  shift, and go to state 37
    LT  shift, and go to state 38
    EQ  shift, and go to state 39

    ifcomp  go to state 40


State 27

   12 stmt: OPBRA GT IDFUNC • ID COL

    ID  shift, and go to state 41


State 28

    4 stmt: ID EQ NUM •

    $default  reduce using rule 4 (stmt)


State 29

    7 stmt: ID EQ fcall •

    $default  reduce using rule 7 (stmt)


State 30

   21 fcallparam: NUM •

    $default  reduce using rule 21 (fcallparam)


State 31

   20 fcallparam: ID •
   24 binop: ID • OP NUM

    OP  shift, and go to state 21

    $default  reduce using rule 20 (fcallparam)


State 32

   23 fcall: OPBRA IDFUNC fcallparam • CLBRA

    CLBRA  shift, and go to state 42


State 33

   22 fcallparam: binop •

    $default  reduce using rule 22 (fcallparam)


State 34

   24 binop: ID OP NUM •

    $default  reduce using rule 24 (binop)


State 35

    6 stmt: RETURN fcall OP fcall •

    $default  reduce using rule 6 (stmt)


State 36

    8 stmt: OPBRA PRINT param CLBRA •

    $default  reduce using rule 8 (stmt)


State 37

   16 ifcomp: GT •

    $default  reduce using rule 16 (ifcomp)


State 38

   15 ifcomp: LT •

    $default  reduce using rule 15 (ifcomp)


State 39

   17 ifcomp: EQ • EQ

    EQ  shift, and go to state 43


State 40

   11 stmt: OPBRA IDFUNC ID ifcomp • NUM COL

    NUM  shift, and go to state 44


State 41

   12 stmt: OPBRA GT IDFUNC ID • COL

    COL  shift, and go to state 45


State 42

   23 fcall: OPBRA IDFUNC fcallparam CLBRA •

    $default  reduce using rule 23 (fcall)


State 43

   17 ifcomp: EQ EQ •

    $default  reduce using rule 17 (ifcomp)


State 44

   11 stmt: OPBRA IDFUNC ID ifcomp NUM • COL

    COL  shift, and go to state 46


State 45

   12 stmt: OPBRA GT IDFUNC ID COL •

    $default  reduce using rule 12 (stmt)


State 46

   11 stmt: OPBRA IDFUNC ID ifcomp NUM COL •

    $default  reduce using rule 11 (stmt)
